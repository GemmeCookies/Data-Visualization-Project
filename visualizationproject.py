# -*- coding: utf-8 -*-
"""VisualizationProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NeZL2ptbcIbNIlsWTPHmX6ABuF0b5qPg

## **Import Packages**
"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import plotly.express as px

"""## **Loading the dataset UK Road Safety: Traffic Accidents and Vehicles**"""

accdf = pd.read_csv("/content/drive/MyDrive/Accident_Information.csv", encoding='latin', dtype={'Accident_Index': 'string'}, low_memory=False)
vehdf = pd.read_csv("/content/drive/MyDrive/Vehicle_Information.csv", encoding='latin', dtype={'Accident_Index': 'string'}, low_memory=False)
accdf['Accident_Year'] = accdf['Year']
accdf = accdf.drop(['Year'], axis=1)

"""**Merge Datasets**"""

df = pd.merge(vehdf, accdf, how='inner', on='Accident_Index')
df.drop_duplicates()

df['Number_of_Casualties'].min()

df['Number_of_Casualties'].max()

"""## **Data Preparation**

**Data Modification**

*Dropping Non-Relevant Variables*
"""

# 2.1: Dropping variables we don't need
myDf = df.drop(['1st_Road_Number', '2nd_Road_Number', 'Did_Police_Officer_Attend_Scene_of_Accident',
                'Local_Authority_(Highway)', 'Location_Easting_OSGR', 'Location_Northing_OSGR',
                'Carriageway_Hazards', 'LSOA_of_Accident_Location', 'InScotland', 'Journey_Purpose_of_Driver',
                'Junction_Location', 'Driver_Home_Area_Type', 'Driver_IMD_Decile', 'model',
                'Towing_and_Articulation', 'Vehicle_Reference', 'Was_Vehicle_Left_Hand_Drive', 'Year',
                'Propulsion_Code', 'Accident_Year'], axis=1)

"""*Count Missing Values*"""

missing_value_counts = myDf.isna().sum()
print(missing_value_counts)

"""*Level Mapping Categorical Variables*"""

# 2.2.1: Junction_Control level mapping
level_mapping_junCtrl = {
    'Auto traffic signal': 'Traffic Signal',
    'Give way or uncontrolled': 'Give Way Sign',
    'Data missing or out of range': None,
    'Authorised person': 'Authorised Person',
    'Not at junction or within 20 metres': 'None',
    'Stop sign': 'Stop Sign'
}

# 2.2.2: Junction_Detail level mapping
level_mapping_junDets = {
    'Not at junction or within 20 metres': 'None',
    'T or staggered junction': 'T',
    'Mini-roundabout': 'Roundabout',
    'More than 4 arms (not roundabout)': 'Crossroad',
    'Private drive or entrence': 'Private Drive or Entrence',
    'Data missing or out of range': None
}

# 2.2.3: Hit combining
# def combine_variables(row):
#     # Check if each variable is empty or not and assign 0 or 1 accordingly
#     Hit_Object_in_Carriageway = 1 if pd.notna(row['Hit_Object_in_Carriageway']) and row['Hit_Object_in_Carriageway'] != '' else 0
#     Hit_Object_off_Carriageway = 1 if pd.notna(row['Hit_Object_off_Carriageway']) and row['Hit_Object_off_Carriageway'] != '' else 0

#     # Combine the values according to the specified conditions
#     return Hit_Object_off_Carriageway + Hit_Object_in_Carriageway
# myDf['Hit'] = myDf.apply(combine_variables, axis=1)

level_mapping_hit = {
    '0': 'No Hits',
    '1': 'On OR off road hit',
    '2': 'On AND off road hits',
}

# 2.2.4: Vehicle_Type: Combine levels
level_mapping_vehType = {
    'Car': 'Car',
    'Motorcycle 125cc and under': 'Motorcycle',
    'Motorcycle 50cc and under': 'Motorcycle',
    'Motorcycle over 125cc and up to 500cc': 'Motorcycle',
    'Motorcycle over 500cc': 'Motorcycle',
    'Motorcycle - unknown cc': 'Motorcycle',
    'Electric motorcycle': 'Electric 2-Wheeled',
    'Mobility scooter': 'Motorcycle',
    'Taxi/Private hire car': 'Taxi',
    'Goods 7.5 tonnes mgw and over': 'Commercial',
    'Goods over 3.5t. and under 7.5t': 'Commercial',
    'Goods vehicle - unknown weight': 'Commercial',
    'Van / Goods 3.5 tonnes mgw or under': 'Commercial',
    'Bus or coach (17 or more pass seats)': 'Bus/Minibus',
    'Minibus (8 - 16 passenger seats)': 'Bus/Minibus',
    'Agricultural vehicle': 'Agriculture',
    'Other vehicle': 'Other'
}

# 2.2.5: Road class (1 and 2) level modification
level_mapping_rdClass = {
    'NA': 'Unclassified',
    'A(M)': 'Motorway'
}

# 2.2.6: Replace the levels in the DataFrame
myDf['Junction_Detail'] = myDf['Junction_Detail'].replace(level_mapping_junDets)
myDf['Junction_Control'] = myDf['Junction_Control'].replace(level_mapping_junCtrl)
myDf['Vehicle_Type'] = myDf['Vehicle_Type'].replace(level_mapping_vehType)
myDf['1st_Road_Class'] = myDf['1st_Road_Class'].replace(level_mapping_rdClass)
myDf['2nd_Road_Class'] = myDf['2nd_Road_Class'].replace(level_mapping_rdClass)

"""Correlation Check and Multicollinearity"""

import seaborn as sns
import matplotlib.pyplot as plt

# Calculate the correlation matrix
corr_matrix = myDf.select_dtypes(include=['int', 'float']).corr()

# Create a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation Heatmap of Numeric Variables')
plt.show()

"""**Missing Data**

*Drop Missing Values*
"""

# 2.3.1: Dropping missing variables
cleanDf = myDf
cleanDf.dropna(subset=['make', 'Latitude', 'Longitude', 'Time', 'Speed_limit', 'Engine_Capacity_.CC.', 'Vehicle_Location.Restricted_Lane',
                       'Pedestrian_Crossing-Physical_Facilities', 'Pedestrian_Crossing-Human_Control' ], how='any', inplace=True)
cleanDf['Age_of_Vehicle'] = pd.to_numeric(cleanDf['Age_of_Vehicle'], errors='coerce')
cleanDf.dropna(subset=['Age_of_Vehicle'], inplace=True)
cleanDf = cleanDf[cleanDf['Vehicle_Type'] != "Data missing or out of range"]
cleanDf

"""*Filling MIssing Values of Selected Variables*"""

# 2.3.2: Impute Missing Vallues
def missing_to_Unknown(df, col, replace="Unknown"):
  missing_values = df[col].isnull()
  df.loc[missing_values, col] = replace

def missing_val_to_Unknown(df, col, toReplace, replace="Unknown"):
  df[col].replace(toReplace, replace, inplace=True)

missing_to_Unknown(cleanDf, 'Hit_Object_off_Carriageway')
missing_to_Unknown(cleanDf, 'Hit_Object_in_Carriageway')
missing_to_Unknown(cleanDf, 'Skidding_and_Overturning')
missing_to_Unknown(cleanDf, '2nd_Road_Class')
missing_to_Unknown(cleanDf, 'Junction_Control')
missing_to_Unknown(cleanDf, 'Special_Conditions_at_Site')

missing_val_to_Unknown(cleanDf, 'Hit_Object_off_Carriageway', "Data missing or out of range")
missing_val_to_Unknown(cleanDf, 'Junction_Control', "Data missing or out of range")
missing_val_to_Unknown(cleanDf, 'Special_Conditions_at_Site', "Data missing or out of range")
missing_val_to_Unknown(cleanDf, '2nd_Road_Class', "NA")

# cleanDf.to_csv("E:\Tommer\Msc\Visualisation\DF\LastDf.csv", index=False)